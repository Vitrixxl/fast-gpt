generator client {
  provider = "prisma-client-js"

}

generator zod{
provider="zod-prisma-types"
}



datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Ai {
  GPT
  CLAUDE
}

enum Sender {
  user
  assistant
}

model User {
  id            String          @id @default(uuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chats Chat[]
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}


model Chat {
  id        String    @id @default(uuid()) 
  user      User      @relation(fields: [userId], references: [id])
  userId    String    
  title     String    @db.VarChar(75)
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @default(now()) @map(name: "updated_at")
  messages  Message[]

  @@map(name: "chats")
}

model Message {
  id        String   @id @default(uuid()) 
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String   
  content   String   @db.Text
  sender    Sender
  ai        Ai?
  createdAt DateTime @default(now())

  @@map(name: "messages")
}

